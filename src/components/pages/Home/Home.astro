---
import Layout from "../../../layouts/Layout.astro";
import Profile from "../../Profile.astro";
import AnchorText from "../../AnchorText.astro";
import Badge from "../../Badge.astro";
import GithubIcon from "../../GithubIcon.astro";
import ExternalLinkIcon from "../../ExternalLinkIcon.astro";
import GithubContributionGraph from "../../GithubContributionGraph.astro";
import GithubMostUsedLanguages from "../../GithubMostUsedLanguages.astro";
import EmbedMyname from "../../EmbedMyname.astro";
import { getLangFromUrl, useTranslations } from '../../../i18n/utils';
import { MYNAME } from '../../../constants/myname'

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout title={`${MYNAME}'s portfolio`}>
  <main class="space-y-12 text-gray-700 dark:text-gray-400">
    <div class="space-y-4">
      <Profile />
      <GithubContributionGraph />
    </div>
    <hr class="border-gray-200 dark:border-gray-800"/>
    <div class="space-y-5 text-gray-700 dark:text-gray-400">
      <p class="flex items-center">
        {t.intro.greeting}<span class="text-2xl ml-1">ðŸ‘‹</span>
      </p>
      {
        t.intro.paragraphs.map((paragraph) => (
          <p>
            <EmbedMyname text={paragraph} />
          </p>
        ))
      }
    </div>
    
    <hr class="border-gray-200 dark:border-gray-800"/>
    <h1 class="text-4xl dark:text-white">{t.skills.title}</h1>
    <div class="mt-8 space-y-8">
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-300">{t.skills.languagesLabel}</h3>
        <ul class="mt-2 flex flex-wrap gap-1.5">
          {
            t.skills.languages.map((skill) => (
              <li class="">
                <Badge>
                  {skill}
                </Badge>
              </li>
            ))
          }
        </ul>
      </div>
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-300">{t.skills.frameworksLabel} & {t.skills.librariesLabel}</h3>
        <ul class="mt-2 flex flex-wrap gap-1.5">
          {
            t.skills.frameworksAndLibraries.map((skill) => (
              <li>
                <Badge>
                  {skill}
                </Badge>
              </li>
            ))
          }
        </ul>
      </div>
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-300">
          {t.skills.mostUsedLanguagesLabel}
        </h3>
        <div class="mt-2">
          <GithubMostUsedLanguages />
        </div>
      </div>
    </div>

    <hr class="border-gray-200 dark:border-gray-800"/>
    <h1 class="text-4xl dark:text-white">{t.projects.title}</h1>
    
    <div class="mt-8 space-y-4">
      {
        t.projects.projects.map((project) => (
          <div class="border p-6 rounded-lg dark:border-gray-800">
            <div class="flex items-center space-x-2">
              <h3 class="font-bold text-slate-700 dark:text-gray-200 text-lg">
                {project.name}
              </h3>

              <div class="text-gray-400 dark:text-gray-500 child:dark:hover:text-gray-400">
                <a href={project.repoUrl} target="_blank" class="hover:text-gray-500 dark:hover:text-gray-400">
                  <GithubIcon />
                </a>
              </div>
              
              {project.demoUrl &&
                <div class="text-gray-400 dark:text-gray-500 child:dark:hover:text-gray-400">
                  <a href={project.demoUrl} target="_blank" class="hover:text-gray-500 dark:hover:text-gray-400">
                    <ExternalLinkIcon />
                  </a>
                </div>
              }
            </div>

            <p class="mt-2 text-sm leading-normal">
              {project.description}
            </p>

            <ul class="mt-4 flex flex-wrap gap-1.5">
              {
                project.technologies.map((skill) => (
                  <li>
                    <Badge>
                      {skill}
                    </Badge>
                  </li>
                ))
              }
            </ul>
          </div>
        ))
      }
    </div>
    
    <hr class="border-gray-200 dark:border-gray-800"/>
    <h1 class="text-4xl dark:text-white">{t.ossContributions.title}</h1>
    <div class="mt-8 space-y-8">
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-300">Prettier</h3>
        <ul class="list-disc mt-2 [&>li]:ml-8">
          <li>
            <AnchorText href="https://github.com/prettier/prettier/pull/14830" target="_blank">
              TypeScript: Fix issue with double semicolon caused by // prettier-ignore on a call signature line (#14830)
            </AnchorText>
          </li>
        </ul>
      </div>
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-300">Mantine</h3>
        <ul class="list-disc mt-2 [&>li]:ml-8">
          <li>
            <AnchorText href="https://github.com/mantinedev/mantine/pull/4281" target="_blank">
              [@mantine/core] AppShell: Fix wrong padding when navbarOffsetBreakpoint and asideOffsetBreakpoint have the same value (#4281)
            </AnchorText>
          </li>
        </ul>
      </div>
    </div>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 48rem;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
